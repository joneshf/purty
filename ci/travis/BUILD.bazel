load(
    "@rules_pkg//:pkg.bzl",
    "pkg_tar",
)

load(
    ":defs.bzl",
    "template_bintray",
)

load(
    "//lib:defs.bzl",
    "version_purty",
)

alias(
    actual = select({
        "//:linux": ":purty-{version}-linux".format(
            version = version_purty,
        ),
        "//:macos": ":purty-{version}-osx".format(
            version = version_purty,
        ),
        "//:windows": ":purty-{version}-win".format(
            version = version_purty,
        ),
    },
        no_match_error = "No purty tarball available for this platform",
    ),
    name = "purty-tar",
    visibility = [
        "//:__subpackages__",
    ],
)

pkg_tar(
    extension = "tar.gz",
    mode = "0755",
    name = "purty-{version}-linux".format(
        version = version_purty,
    ),
    srcs = [
        "//src:purty",
    ],
)

pkg_tar(
    extension = "tar.gz",
    mode = "0755",
    name = "purty-{version}-osx".format(
        version = version_purty,
    ),
    srcs = [
        "//src:purty",
    ],
)

pkg_tar(
    extension = "tar.gz",
    name = "purty-{version}-win".format(
        version = version_purty,
    ),
    srcs = [
        "//src:purty",
    ],
)


template_bintray(
    name = "templated-bintray.json",
    tar = ":purty-tar",
    template = "bintray.json",
    upload_filename = select({
        "//:linux": "purty-{version}-linux.tar.gz".format(
            version = version_purty,
        ),
        "//:macos": "purty-{version}-osx.tar.gz".format(
            version = version_purty,
        ),
        "//:windows": "purty-{version}-win.tar.gz".format(
            version = version_purty,
        ),
    }),
    version = version_purty,
)
