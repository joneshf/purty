load(
    "@build_bazel_rules_nodejs//:index.bzl",
    "nodejs_binary",
)

load(
    "//lib:defs.bzl",
    "version_purty",
)

alias(
    actual = select({
        ":linux": "//bin/linux:purty-binary",
        ":macos": "//bin/osx:purty-binary",
        ":windows": "//bin/win:purty-binary",
    },
        no_match_error = "No purty binary available for this platform",
    ),
    name = "platform-specific-purty",
)

config_setting(
    name = "linux",
    constraint_values = [
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "macos",
    constraint_values = [
        "@platforms//os:macos",
    ],
)

config_setting(
    name = "windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
)

exports_files([
    ".hlint.yaml",
], visibility = [
    "//:__subpackages__",
],
)

nodejs_binary(
    data = [
        ":platform-specific-purty",
    ],
    entry_point = "bin/purty.js",
    name = "purty.js",
)

sh_test(
    args = [
        "--expected-version {version}".format(
            version = version_purty,
        ),
        "--purty $(location //src:purty)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        "//src:purty",
    ],
    name = "test-acceptance-binary",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)

sh_test(
    args = [
        "--expected-version {version}".format(
            version = version_purty,
        ),
        "--purty $(location :purty.js)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        ":purty.js",
    ],
    name = "test-acceptance-npm",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)

test_suite(
    name = "lint",
    tags = [
        "lint",
    ],
    tests = [
        "//lib:lint",
        "//src:lint",
    ],
)
