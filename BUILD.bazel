load(
    "@bazel_skylib//rules:copy_file.bzl",
    "copy_file",
)

load(
    "@build_bazel_rules_nodejs//:index.bzl",
    "nodejs_binary",
)

load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_toolchain_library",
)

load(
    "@rules_pkg//:pkg.bzl",
    "pkg_tar",
)

load(
    "//:ci/travis/defs.bzl",
    "template_bintray",
)

load(
    "//lib:defs.bzl",
    "version_purty",
)

load(
    "//tools/bazel:defs.bzl",
    "expand_template",
)

load(
    "//tools/hlint:hlint.bzl",
    "hlint_test",
)

load(
    "//tools/ormolu:ormolu.bzl",
    "ormolu_format",
    "ormolu_test",
)

alias(
    actual = select({
        ":linux": "linux-specific-purty",
        ":macos": "macos-specific-purty",
        ":windows": "windows-specific-purty",
    },
        no_match_error = "No purty binary available for this platform",
    ),
    name = "platform-specific-purty",
)

alias(
    actual = select({
        ":linux": "purty-{version}-linux".format(
            version = version_purty,
        ),
        ":macos": "purty-{version}-osx".format(
            version = version_purty,
        ),
        ":windows": "purty-{version}-win".format(
            version = version_purty,
        ),
    },
        no_match_error = "No purty tarball available for this platform",
    ),
    name = "purty-tar",
)

config_setting(
    name = "linux",
    constraint_values = [
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "macos",
    constraint_values = [
        "@platforms//os:macos",
    ],
)

config_setting(
    name = "windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
)

copy_file(
    is_executable = True,
    name = "linux-specific-purty",
    out = "bin/linux/purty",
    src = ":purty-binary",
)

copy_file(
    is_executable = True,
    name = "macos-specific-purty",
    out = "bin/osx/purty",
    src = ":purty-binary",
)

copy_file(
    is_executable = True,
    name = "windows-specific-purty",
    out = "bin/win/purty",
    src = ":purty-binary",
)

expand_template(
    name = "templated-package.json",
    substitutions = {
        "{{REPLACE_WITH_VERSION}}": version_purty,
    },
    template = "ci/npm/package.json",
)

exports_files([
    ".hlint.yaml",
], visibility = [
    "//:__subpackages__",
],
)

haskell_binary(
    compiler_flags = [
        "-O2",
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
        "-optc=-static",
        "-optl=-pthread",
        "-rtsopts",
        "-static",
        "-threaded",
        "-with-rtsopts=-N",
    ] + select({
        ":linux": [
            "-optl=-static",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":base",
        "//lib:purty",
    ],
    name = "purty-binary",
    srcs = [
        "src/Main.hs",
    ],
    visibility = [
        "//:__subpackages__",
    ],
)

haskell_toolchain_library(
    name = "base",
)

hlint_test(
    name = "lint-hlint",
    srcs = [
        "src/Main.hs",
    ],
)

nodejs_binary(
    entry_point = "bin/purty.js",
    name = "purty.js",
)

ormolu_format(
    name = "format-ormolu",
    srcs = [
        "src/Main.hs",
    ],
)

ormolu_test(
    name = "lint-ormolu",
    srcs = [
        "src/Main.hs",
    ],
)

pkg_tar(
    extension = "tar.gz",
    mode = "0755",
    name = "purty-{version}-linux".format(
        version = version_purty,
    ),
    remap_paths = {
        "purty-binary": "purty",
    },
    srcs = [
        ":purty-binary",
    ],
)

pkg_tar(
    extension = "tar.gz",
    mode = "0755",
    name = "purty-{version}-osx".format(
        version = version_purty,
    ),
    remap_paths = {
        "purty-binary": "purty",
    },
    srcs = [
        ":purty-binary",
    ],
)

pkg_tar(
    extension = "tar.gz",
    name = "purty-{version}-win".format(
        version = version_purty,
    ),
    remap_paths = {
        "purty-binary.exe": "purty.exe",
    },
    srcs = [
        ":purty-binary",
    ],
)

sh_test(
    args = [
        "--expected-version {version}".format(
            version = version_purty,
        ),
        "--purty $(location :purty-binary)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        ":purty-binary",
    ],
    name = "test-acceptance-binary",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)

sh_test(
    args = [
        "--expected-version {version}".format(
            version = version_purty,
        ),
        "--purty $(location :purty.js)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        ":platform-specific-purty",
        ":purty.js",
    ],
    name = "test-acceptance-npm",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)

template_bintray(
    name = "templated-bintray.json",
    tar = ":purty-tar",
    template = "ci/travis/bintray.json",
    upload_filename = select({
        ":linux": "purty-{version}-linux.tar.gz".format(
            version = version_purty,
        ),
        ":macos": "purty-{version}-osx.tar.gz".format(
            version = version_purty,
        ),
        ":windows": "purty-{version}-win.tar.gz".format(
            version = version_purty,
        ),
    }),
    version = version_purty,
)

test_suite(
    name = "lint",
    tags = [
        "lint",
    ],
    tests = [
        "//lib:lint",
        ":lint-hlint",
        ":lint-ormolu",
    ],
)
