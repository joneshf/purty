load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_library",
    "haskell_toolchain_library",
)

load(
    ":defs.bzl",
    "version_purty",
)

load(
    "//tools/bazel:defs.bzl",
    "expand_template_temporary",
)

load(
    "//tools/hlint:hlint.bzl",
    "hlint_test",
)

load(
    "//tools/ormolu:ormolu.bzl",
    "ormolu_format",
    "ormolu_test",
)

expand_template_temporary(
    name = "templated-Version.hs",
    substitutions = {
        "{{REPLACE_WITH_VERSION}}": version_purty,
    },
    template = "Version.hs",
)

haskell_library(
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    deps = [
        ":base",
        ":bytestring",
        "@stackage//:componentm",
        "@stackage//:optparse-applicative",
        "@stackage//:pathwalk",
        "@stackage//:purescript-cst",
        "@stackage//:rio",
    ],
    name = "purty",
    srcs = [
        ":templated-Version.hs",
        "Annotation.hs",
        "Args.hs",
        "Error.hs",
        "Format.hs",
        "Log.hs",
        "Purty.hs",
        "SourceRange.hs",
        "Span.hs",
    ],
    visibility = [
        "//:__subpackages__",
    ],
)

haskell_toolchain_library(
    name = "base",
)

haskell_toolchain_library(
    name = "bytestring",
)

hlint_test(
    name = "lint-hlint",
    srcs = [
        "Annotation.hs",
        "Args.hs",
        "Error.hs",
        "Format.hs",
        "Log.hs",
        "Purty.hs",
        "SourceRange.hs",
        "Span.hs",
        "Version.hs",
    ],
)

ormolu_format(
    name = "format-ormolu",
    srcs = [
        "Annotation.hs",
        "Args.hs",
        "Error.hs",
        "Format.hs",
        "Log.hs",
        "Purty.hs",
        "SourceRange.hs",
        "Span.hs",
        "Version.hs",
    ],
)

ormolu_test(
    name = "lint-ormolu",
    srcs = [
        "Annotation.hs",
        "Args.hs",
        "Error.hs",
        "Format.hs",
        "Log.hs",
        "Purty.hs",
        "SourceRange.hs",
        "Span.hs",
        "Version.hs",
    ],
)

test_suite(
    name = "lint",
    tags = [
        "lint",
    ],
    tests = [
        ":lint-hlint",
        ":lint-ormolu",
    ],
)
